--===================== CUSTOM AUTH =====================
create schema
  if not exists custom_auth;

drop table if exists
  custom_auth.session cascade;

create table
  custom_auth.session (
    id uuid primary key default gen_random_uuid (),
    user_id char(5) not null references person,
    fk_user_type smallint references user_type not null,
    access_token uuid not null,
    access_token_expiry timestamptz default current_timestamp + interval '5 minutes',
    session_expiry timestamptz default current_timestamp + interval '6 hours'
  );

drop table if exists
  custom_auth.refresh_token cascade;

create table
  custom_auth.refresh_token (
    id bigint generated by default as identity primary key,
    token uuid not null,
    revoked boolean,
    fk_session_id uuid references session on delete cascade
  );

create or replace function
  custom_auth.find_session (session_id uuid, access_token uuid) returns table (session_user_id text, session_user_type smallint) security definer as $$
  declare
  	session_user_id_temp text;
  	session_user_type_temp smallint;
  begin
    select user_id, fk_user_type into session_user_id_temp, session_user_type_temp
    from custom_auth.session s
    where s.session_id = session_id and s.access_token = access_token
    limit 1;

    return query select session_user_id_temp, session_user_type_temp;
  end;
$$ language plpgsql;

create or replace function
  custom_auth.authenticate () returns void as $$
  declare
    session_id uuid;
    access_token uuid;
    session_user_id char(5);
    session_user_type smallint;
  begin
    select current_setting('request.cookie.session_id', true) into session_id;
    select current_setting('request.cookie.access_token', true) into access_token;
    select auth.session_user_id(session_id, access_token) into session_user_id;

  	select user_id, fk_user_type into session_user_id, session_user_type
    from custom_auth.session s
    where s.session_id = session_id and s.access_token = access_token;

    if session_user_id is not null then
        set local role to authenticated;
        perform set_config('auth.user_id', session_user_id, true);
  		perform set_config('auth.user_type', session_user_type::text, true);
    else
      set local role to anonymous;
        perform set_config('auth.user_id', '', true);
  		perform set_config('auth.user_type', '', true);
    end if;
  end;
$$ language plpgsql;